from __future__ import annotations

from dataclasses import dataclass
from pathlib import Path
import yaml


@dataclass
class GitHubConfig:
    token: str | None
    repo: str | None
    base_branch: str
    pr_title_prefix: str
    pr_body_footer: str


@dataclass
class TrelloConfig:
    enabled: bool
    api_key: str | None
    token: str | None
    board_id: str | None
    list_id: str | None
    card_id: str | None


@dataclass
class AgentConfig:
    top_k: int
    output_patch_path: str
    dry_run: bool
    task_source: str  # manual | trello


@dataclass
class IndexConfig:
    include_extensions: list[str]
    exclude_dirs: list[str]


@dataclass
class ProviderConfig:
    provider: str
    model: str
    embeddings_model: str | None
    openai_api_key: str | None
    openai_model: str | None
    openai_embeddings_model: str | None
    ollama_host: str


@dataclass
class AppConfig:
    project_path: str
    provider: ProviderConfig
    github: GitHubConfig
    index: IndexConfig
    agent: AgentConfig
    trello: TrelloConfig


class ConfigLoader:
    @staticmethod
    def load(config_path: str) -> AppConfig:
        data = ConfigLoader._read_yaml(config_path)
        provider = ProviderConfig(
            provider=data.get("provider", "ollama"),
            model=data.get("model", "mistral:latest"),
            embeddings_model=data.get("embeddings_model"),
            openai_api_key=data.get("openai_api_key"),
            openai_model=data.get("openai_model", data.get("model")),
            openai_embeddings_model=data.get("openai_embeddings_model", "text-embedding-3-small"),
            ollama_host=(data.get("ollama", {}) or {}).get("host", "http://localhost:11434"),
        )
        github = GitHubConfig(
            token=(data.get("github", {}) or {}).get("token"),
            repo=(data.get("github", {}) or {}).get("repo"),
            base_branch=(data.get("github", {}) or {}).get("base_branch", "main"),
            pr_title_prefix=(data.get("github", {}) or {}).get("pr_title_prefix", "feat:"),
            pr_body_footer=(data.get("github", {}) or {}).get("pr_body_footer", "\n\nGenerated by llm-dev-agent"),
        )
        index = IndexConfig(
            include_extensions=(data.get("index", {}) or {}).get("include_extensions", [".java", ".vue", ".js", ".html"]),
            exclude_dirs=(data.get("index", {}) or {}).get("exclude_dirs", ["node_modules", "target", "dist", ".git", "build"]),
        )
        agent = AgentConfig(
            top_k=int((data.get("agent", {}) or {}).get("top_k", 8)),
            output_patch_path=(data.get("agent", {}) or {}).get("output_patch_path", "generated"),
            dry_run=bool((data.get("agent", {}) or {}).get("dry_run", False)),
            task_source=(data.get("agent", {}) or {}).get("task_source", "manual"),
        )
        trello_data = (data.get("trello", {}) or {})
        trello = TrelloConfig(
            enabled=bool(trello_data.get("enabled", False)),
            api_key=trello_data.get("api_key"),
            token=trello_data.get("token"),
            board_id=trello_data.get("board_id"),
            list_id=trello_data.get("list_id"),
            card_id=trello_data.get("card_id"),
        )

        project_path = str(Path(data.get("project_path", ".")).resolve())
        return AppConfig(
            project_path=project_path,
            provider=provider,
            github=github,
            index=index,
            agent=agent,
            trello=trello,
        )

    @staticmethod
    def _read_yaml(p: str) -> dict:
        with open(p, "r", encoding="utf-8") as f:
            return yaml.safe_load(f) or {}


